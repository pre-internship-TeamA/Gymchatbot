version: '3.7'

services:

    prometheus:
        image: prom/prometheus:latest
        volumes:
            - ./prometheus/:/etc/prometheus/
            - ./prometheus/data:/prometheus
        command:
            - '--config.file=/etc/prometheus/prometheus.yml'
            - '--storage.tsdb.path=/prometheus'
            - '--web.console.libraries=/usr/share/prometheus/console_libraries'
            - '--web.console.templates=/usr/share/prometheus/consoles'
        ports:
            - 9090:9090
        links:
            - cadvisor:cadvisor
        depends_on:
            - cadvisor
        # networks:
        #     - app-tier
        restart: on-failure 

    grafana:
        image: grafana/grafana
        user: "472"
        depends_on:
            - prometheus
        ports:
            - 3002:3000
        volumes:
            - ./grafana/data:/var/lib/grafana
            - ./grafana/provisioning/:/etc/grafana/provisioning/
        # env_file:
        #     - ./grafana/config.monitoring
        # networks:
        #     - app-tier
        restart: always

    node-exporter:
        image: prom/node-exporter
        volumes:
            - /proc:/host/proc:ro
            - /sys:/host/sys:ro
            - /:/rootfs:ro
        command: 
            - '--path.procfs=/host/proc' 
            - '--path.sysfs=/host/sys'
            - --collector.filesystem.ignored-mount-points
            - "^/(sys|proc|dev|host|etc|rootfs/var/lib/docker/containers|rootfs/var/lib/docker/overlay2|rootfs/run/docker/netns|rootfs/var/lib/docker/aufs)($$|/)"
        ports:
            - 9100:9100
        # networks:
        # - app-tier
        restart: always
        deploy:
            mode: global
        privileged: true

    cadvisor:
        image: google/cadvisor
        volumes:
            - /:/rootfs:ro
            - /var/run:/var/run:rw
            - /sys:/sys:ro
            - /var/lib/docker/:/var/lib/docker:ro
        ports:
            - 8081:8080
        # networks:
        #     - app-tier
        restart: always
        deploy:
            mode: global
            restart_policy:
                condition: on-failure 

    frontend:
        build:
            context: ./frontend
            dockerfile: dockerfile
            args:
                API_URL: "*"
        environment:
            - REACT_APP_BACKEND_URL=http://localhost:5000
        volumes:
            - ./frontend/:/frontend
            - build_folder:/frontend/build
            - ./frontend/node_modules/:/frontend/node_modules
        tty: true


    backend:
        build: 
            context: ./backend
            dockerfile: Dockerfile
        command: gunicorn --bind 0.0.0.0:5000 app:app
        ports:
            - "5000:5000"
        volumes:
            - appdata:/var/www/
            - ./backend:/app
    nginx:
        build: ./nginx
        ports:
            - 80:8080
        volumes:
            - build_folder:/var/www/frontend
        depends_on:
            - backend
            - frontend


volumes:
    mongodbdata:
        driver: local
    appdata:
        driver: local
    build_folder: