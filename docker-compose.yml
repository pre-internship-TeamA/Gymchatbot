
version: '3.7'

services:

    # prometheus:
    #     image: prom/prometheus:latest
    #     volumes:
    #         - ./prometheus/:/etc/prometheus/
    #         - ./prometheus/data:/prometheus
    #     command:
    #         - '--config.file=/etc/prometheus/prometheus.yml'
    #         - '--storage.tsdb.path=/prometheus'
    #         - '--web.console.libraries=/usr/share/prometheus/console_libraries'
    #         - '--web.console.templates=/usr/share/prometheus/consoles'
    #     ports:
    #         - 9090:9090
    #     links:
    #         - cadvisor:cadvisor
    #         - alertmanager:alertmanager
    #     depends_on:
    #         - cadvisor
    #     # networks:
    #     #     - app-tier
    #     restart: always
    
    # cadvisor:
    #     image: google/cadvisor
    #     volumes:
    #         - /:/rootfs:ro
    #         - /var/run:/var/run:rw
    #         - /sys:/sys:ro
    #         - /var/lib/docker/:/var/lib/docker:ro
    #     ports:
    #         - 8081:8080
    #     # networks:
    #     #     - app-tier
    #     restart: always
    #     deploy:
    #         mode: global
    #         restart_policy:
    #             condition: on-failure      

    # grafana:
    #     image: grafana/grafana
    #     user: "472"
    #     depends_on:
    #         - prometheus
    #     ports:
    #         - 3002:3000
    #     volumes:
    #         - ./grafana/data:/var/lib/grafana
    #         - ./grafana/provisioning/:/etc/grafana/provisioning/
    #     # env_file:
    #     #     - ./grafana/config.monitoring
    #     # networks:
    #     #     - app-tier
    #     #     - grafana-tier
    #     restart: always


    frontend:
        build:
            context: ./frontend
            dockerfile: dockerfile
        tty: true
        ports:
            - "3000:3000"
        volumes: 
            - ./frontend:/app
            - /app/node_modules
        #networks:
        #    - frontend

    # mongodb:
    #     image: mongo:latest
    #     container_name: mongo
    #     ports:
    #         - "27017:27017"
    #     environment:
    #         - MONGO_INITDB_DATABASE=animal_db
    #         - MONGO_INITDB_ROOT_USERNAME=root
    #         - MONGO_INITDB_ROOT_PASSWORD=pass
        

    backend:
        build: 
            context: ./backend
            dockerfile: dockerfile
        command: gunicorn --bind 0.0.0.0:5000 app:app --reload
        ports:
            - "5000:5000"
        environment:
            - MONGO_HOST=mongodb
            - MONGO_PORT=27017
            - MONGO_USER=root
            - MONGO_PASS=pass
            - MONGO_DATABASE=animal_db
        volumes:
            - appdata:/var/www/
            - ./backend:/app
        depends_on: 
            - mongodb

volumes:
    mongodb_data:
    appdata:
